import "../../css/QlyXeVe.css";
import { Sidebar } from "../../components/Sidebar";
import { useEffect, useState } from "react";
import { ThemXeVe } from "./ThemXeVe";
import { SuaXeVe } from "./SuaXeVe";
import { useNavigate } from "react-router-dom";

export function QlyXeVe() {
  const [data, setData] = useState([]);
  const [keyword, setKeyword] = useState("");
  const [from, setFrom] = useState("");
  const [to, setTo] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [editingId, setEditingId] = useState(null);
  const navigate = useNavigate();

  const [addingId, setAddingId] = useState(null);
  const [customer, setCustomer] = useState({
    ten: "",
    sdt: "",
    soVe: "",
  });

  const fetchXeVe = async () => {
    try {
      // 1Ô∏è‚É£ L·∫•y danh s√°ch s·ª± ki·ªán
      let url = `http://localhost:3000/api/xeve/sukien`;
      const params = new URLSearchParams();

      if (keyword) params.append("keyword", keyword);
      if (from) params.append("from", from);
      if (to) params.append("to", to);

      if (params.toString()) url += `?${params.toString()}`;

      const [resSuKien, resCount] = await Promise.all([
        fetch(url),
        fetch("http://localhost:3000/api/xeve/datve/count"),
      ]);

      const dataSuKien = await resSuKien.json();
      const dataCount = await resCount.json();

      // 2Ô∏è‚É£ G·ªôp d·ªØ li·ªáu: th√™m c·ªôt DaDat = t·ªïng slot ƒë√£ ƒë·∫∑t
      const merged = dataSuKien.map((sk) => {
        const found = dataCount.find((d) => d.MaXeVe === sk.MaXeVe);
        return {
          ...sk,
          DaDat: found ? found.TongSlot : 0,
        };
      });

      setData(merged);
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu x√© v√©:", err);
    }
  };

  useEffect(() => {
    fetchXeVe();
  }, [keyword, from]);

  const handleToggleStatus = async (item) => {
    const current = item.TrangThai?.trim();
    if (current === "M·ªü") {
      const ok = window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën KH√ìA s·ª± ki·ªán n√†y?");
      if (!ok) return;
    }

    try {
      const res = await fetch(
        `http://localhost:3000/api/xeve/sukien/${item.MaXeVe}/status`,
        { method: "PUT" }
      );
      const data = await res.json();
      if (res.ok) {
        alert(data.message);
        fetchXeVe();
      } else {
        alert(`‚ùå ${data.message}`);
      }
    } catch (e) {
      console.error("‚ùå L·ªói:", e);
    }
  };

  const handleDelete = async (MaXeVe) => {
    const ok = window.confirm(
      "‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·ª± ki·ªán n√†y kh√¥ng?"
    );
    if (!ok) return;

    try {
      const res = await fetch(`http://localhost:3000/api/xeve/${MaXeVe}`, {
        method: "DELETE",
      });
      const result = await res.json();
      if (res.ok) {
        alert("‚úÖ X√≥a s·ª± ki·ªán th√†nh c√¥ng!");
        fetchXeVe();
      } else {
        alert(`‚ùå L·ªói: ${result.message || "Kh√¥ng th·ªÉ x√≥a s·ª± ki·ªán"}`);
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a:", err);
      alert("‚ùå L·ªói k·∫øt n·ªëi t·ªõi server.");
    }
  };

  const handleAddCustomerClick = (MaXeVe) => {
    if (addingId === MaXeVe) {
      setAddingId(null);
    } else {
      setAddingId(MaXeVe);
      setCustomer({ ten: "", sdt: "", soVe: "" });
    }
  };

  // ‚úÖ Thanh to√°n
  const handleThanhToan = (item) => {
    if (!customer.ten || !customer.sdt || !customer.soVe) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    const bookingData = {
      ten: customer.ten,
      sdt: customer.sdt,
      soVe: customer.soVe,
      tenSuKien: item.TenSuKien,
      ngayToChuc: item.NgayToChuc,
      thoiGianBatDau: item.ThoiGianBatDau,
      thoiGianKetThuc: item.ThoiGianKetThuc,
      danhSachSan: item.DanhSachSan,
      maXeVe: item.MaXeVe,
    };

    console.log("üì¶ D·ªØ li·ªáu truy·ªÅn sang TTXeVe:", bookingData);

    // ‚úÖ D·∫´n t·ªõi trang thanh to√°n + truy·ªÅn d·ªØ li·ªáu qua state
    navigate("/ttxeve", { state: { bookingData, role: "quanly" } });

    setAddingId(null);
  };

  return (
    <div className="qlyxeve-container">
      <Sidebar />

      <div className="qlyxeve-content">
        <h3>Danh s√°ch s·ª± ki·ªán x√© v√©</h3>
        <div className="top-bar">
          <div className="filter-left">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm t√™n s·ª± ki·ªán..."
              value={keyword}
              onChange={(e) => setKeyword(e.target.value)}
              className="xeve-input search-input"
            />
            <input
              type="date"
              value={from}
              onChange={(e) => {
                const selectedDate = e.target.value; // ng√†y ng∆∞·ªùi d√πng ch·ªçn
                const today = new Date().toISOString().split("T")[0]; // yyyy-mm-dd hi·ªán t·∫°i
                // N·∫øu ng√†y ch·ªçn nh·ªè h∆°n h√¥m nay, m·∫∑c ƒë·ªãnh l·∫•y h√¥m nay
                setFrom(selectedDate >= today ? selectedDate : today);
              }}
              className="xeve-input date-input"
              title="T·ª´ ng√†y"
            />
          </div>

          <div className="add-right">
            <button className="btn btn-add" onClick={() => setShowModal(true)}>
              Th√™m s·ª± ki·ªán
            </button>
          </div>
        </div>

        <table>
          <thead>
            <tr>
              <th>T√™n s·ª± ki·ªán</th>
              <th>Ng√†y t·ªï ch·ª©c</th>
              <th>Gi·ªù b·∫Øt ƒë·∫ßu</th>
              <th>Gi·ªù k·∫øt th√∫c</th>
              <th>S√¢n tham gia</th>
              <th>S·ªë ng∆∞·ªùi t·ªëi ƒëa</th>
              <th>Tr·∫°ng th√°i</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {data.length === 0 ? (
              <tr>
                <td colSpan="8" style={{ textAlign: "center" }}>
                  Kh√¥ng c√≥ s·ª± ki·ªán n√†o
                </td>
              </tr>
            ) : (
              data.map((item) => (
                <>
                  <tr key={item.MaXeVe}>
                    <td>{item.TenSuKien}</td>
                    <td>{item.NgayToChuc?.split("T")[0]}</td>
                    <td>{item.ThoiGianBatDau?.slice(0, 5)}</td>
                    <td>{item.ThoiGianKetThuc?.slice(0, 5)}</td>
                    <td>{item.DanhSachSan}</td>
                    <td>
                      {item.DaDat}/{item.SoLuongToiDa}
                    </td>

                    <td>
                      <button
                        className={`status-btn ${
                          item.TrangThai === "M·ªü" ? "btn-danger" : "btn-success"
                        }`}
                        onClick={() => handleToggleStatus(item)}
                      >
                        {item.TrangThai === "M·ªü"
                          ? "ƒê√≥ng s·ª± ki·ªán"
                          : "M·ªü s·ª± ki·ªán"}
                      </button>
                    </td>

                    <td className="action-buttons">
                      <button
                        className="btn btn-primary"
                        onClick={() => handleAddCustomerClick(item.MaXeVe)}
                      >
                        {addingId === item.MaXeVe ? "·∫®n form" : "Th√™m ng∆∞·ªùi"}
                      </button>

                      <button
                        className="btn btn-warning"
                        onClick={() => setEditingId(item.MaXeVe)}
                      >
                        S·ª≠a
                      </button>

                      <button
                        className="btn btn-danger"
                        onClick={() => handleDelete(item.MaXeVe)}
                      >
                        X√≥a
                      </button>
                    </td>
                  </tr>

                  {addingId === item.MaXeVe && (
                    <tr className="add-row">
                      <td colSpan="8">
                        <div className="add-customer-form">
                          <p className="intro">Th√™m kh√°ch h√†ng</p>
                          <input
                            type="text"
                            className="xeve-input"
                            placeholder="T√™n kh√°ch h√†ng"
                            value={customer.ten}
                            onChange={(e) =>
                              setCustomer((prev) => ({
                                ...prev,
                                ten: e.target.value,
                              }))
                            }
                          />
                          <input
                            type="text"
                            placeholder="S·ªë ƒëi·ªán tho·∫°i"
                            className="sdt-input xeve-input"
                            value={customer.sdt}
                            onChange={(e) =>
                              setCustomer((prev) => ({
                                ...prev,
                                sdt: e.target.value,
                              }))
                            }
                          />
                          <input
                            type="number"
                            className="xeve-input"
                            placeholder="S·ªë v√© mu·ªën ƒë·∫∑t"
                            value={customer.soVe}
                            onChange={(e) =>
                              setCustomer((prev) => ({
                                ...prev,
                                soVe: e.target.value,
                              }))
                            }
                            min="1"
                          />
                          <button
                            className="btn btn-pay"
                            disabled={
                              !customer.ten || !customer.sdt || !customer.soVe
                            }
                            onClick={() => handleThanhToan(item)}
                          >
                            üí≥ Thanh to√°n
                          </button>
                        </div>
                      </td>
                    </tr>
                  )}
                </>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Modal th√™m/s·ª≠a gi·ªØ nguy√™n */}
      {showModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <button className="close-btn" onClick={() => setShowModal(false)}>
              ‚úñ
            </button>
            <ThemXeVe onClose={() => setShowModal(false)} onAdded={fetchXeVe} />
          </div>
        </div>
      )}

      {editingId && (
        <div className="modal-overlay">
          <div className="modal-content">
            <button className="close-btn" onClick={() => setEditingId(null)}>
              ‚úñ
            </button>
            <SuaXeVe
              MaXeVe={editingId}
              onClose={() => setEditingId(null)}
              onUpdated={() => {
                setEditingId(null);
                fetchXeVe();
              }}
            />
          </div>
        </div>
      )}
    </div>
  );
}
