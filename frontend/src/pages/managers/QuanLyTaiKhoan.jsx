import React, { useEffect, useState } from "react";
import axios from "axios";
import "../../css/QuanLyTaiKhoanPage.css";
import { Sidebar } from "../../components/Sidebar";

export default function TaiKhoan() {
  const API = "http://localhost:3000/api/taikhoan";
  const [accounts, setAccounts] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    maTK: "",
    userName: "",
    passWord: "",
    role: "Nh√¢n vi√™n",
  });
  const [isEdit, setIsEdit] = useState(false);

  const fetchAccounts = async () => {
    try {
      const res = await axios.get(API);
      setAccounts(res.data);
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫£i t√†i kho·∫£n:", err);
      alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch t√†i kho·∫£n");
    }
  };

  useEffect(() => {
    fetchAccounts();
  }, []);

  const handleAdd = () => {
    setFormData({ maTK: "", userName: "", passWord: "", role: "Nh√¢n vi√™n" });
    setIsEdit(false);
    setShowForm(true);
  };

  const handleEdit = (acc) => {
    setFormData(acc);
    setIsEdit(true);
    setShowForm(true);
  };

  const handleDelete = async (maTK) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n n√†y?")) return;
    try {
      await axios.delete(`${API}/${maTK}`);
      alert("‚úÖ X√≥a th√†nh c√¥ng");
      fetchAccounts();
    } catch (err) {
      alert("L·ªói khi x√≥a t√†i kho·∫£n");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (isEdit) {
        await axios.put(API, formData);
        alert("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng");
      } else {
        await axios.post(API, {
          userName: formData.userName,
          passWord: formData.passWord,
          role: formData.role,
        });
        alert("‚úÖ Th√™m th√†nh c√¥ng");
      }
      setShowForm(false);
      fetchAccounts();
    } catch (err) {
      console.error("‚ùå L·ªói khi l∆∞u:", err);
      alert("L·ªói khi l∆∞u t√†i kho·∫£n");
    }
  };

  return (
    <div className="tk-app">
      <Sidebar />
      <div className="tk-container container mt-4">
        <div className="d-flex justify-content-between align-items-center mb-3">
          <h2>üßë‚Äçüíª Danh s√°ch t√†i kho·∫£n</h2>
          <button className="tk-btn-add" onClick={handleAdd}>
            ‚ûï Th√™m t√†i kho·∫£n
          </button>
        </div>

        <table className="tk-table table table-striped table-bordered">
          <thead>
            <tr>
              <th>M√£ TK</th>
              <th>T√™n ƒëƒÉng nh·∫≠p</th>
              <th>M·∫≠t kh·∫©u</th>
              <th>Ph√¢n quy·ªÅn</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {accounts.length > 0 ? (
              accounts.map((acc) => (
                <tr key={acc.maTK}>
                  <td>{acc.maTK}</td>
                  <td>{acc.userName}</td>
                  <td>{acc.passWord}</td>
                  <td>{acc.role}</td>
                  <td>
                    <button
                      className="tk-btn-warning me-2"
                      onClick={() => handleEdit(acc)}
                    >
                      ‚úèÔ∏è S·ª≠a
                    </button>
                    <button
                      className="tk-btn-danger"
                      onClick={() => handleDelete(acc.maTK)}
                    >
                      üóëÔ∏è X√≥a
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="5" className="text-center">
                  Kh√¥ng c√≥ d·ªØ li·ªáu
                </td>
              </tr>
            )}
          </tbody>
        </table>

        {showForm && (
          <div className="tk-modal-backdrop">
            <div className="tk-modal-content p-4 rounded shadow">
              <h4>{isEdit ? "‚úèÔ∏è S·ª≠a t√†i kho·∫£n" : "‚ûï Th√™m t√†i kho·∫£n"}</h4>
              <form onSubmit={handleSubmit}>
                {isEdit && (
                  <div className="mb-3">
                    <label className="form-label">M√£ t√†i kho·∫£n</label>
                    <input
                      type="text"
                      className="form-control"
                      value={formData.maTK}
                      readOnly
                    />
                  </div>
                )}

                <div className="mb-3">
                  <label className="form-label">T√™n ƒëƒÉng nh·∫≠p</label>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p..."
                    value={formData.userName}
                    onChange={(e) =>
                      setFormData({ ...formData, userName: e.target.value })
                    }
                    required
                    readOnly={isEdit}
                  />
                </div>

                <div className="mb-3">
                  <label className="form-label">M·∫≠t kh·∫©u</label>
                  <input
                    type="password"
                    className="form-control"
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u..."
                    value={formData.passWord}
                    onChange={(e) =>
                      setFormData({ ...formData, passWord: e.target.value })
                    }
                    required
                  />
                </div>

                <div className="mb-3">
                  <label className="form-label">Ph√¢n quy·ªÅn</label>
                  <select
                    className="form-select"
                    value={formData.role}
                    onChange={(e) =>
                      setFormData({ ...formData, role: e.target.value })
                    }
                    required
                  >
                    <option value="Nh√¢n vi√™n">Nh√¢n vi√™n</option>
                    <option value="Qu·∫£n l√Ω">Qu·∫£n l√Ω</option>
                    <option value="Admin">Admin</option>
                  </select>
                </div>

                <div className="d-flex justify-content-end">
                  <button type="submit" className="tk-btn-save me-2">
                    üíæ {isEdit ? "C·∫≠p nh·∫≠t" : "L∆∞u m·ªõi"}
                  </button>
                  <button
                    type="button"
                    className="tk-btn-cancel"
                    onClick={() => setShowForm(false)}
                  >
                    ‚ùå H·ªßy
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
