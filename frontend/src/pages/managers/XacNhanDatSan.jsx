import { useState, useEffect, useRef } from "react";
import { Sidebar } from "../../components/Sidebar";
import "../../css/XacNhanDatSan.css";

export function XacNhanDatSan() {
  const [danhSachSan, setDanhSachSan] = useState([]);
  const [tenKhach, setTenKhach] = useState("");
  const [sdt, setSdt] = useState("");
  const [selectedKhachHangId, setSelectedKhachHangId] = useState(""); // <-- L∆∞u MaKH
  const [searchTen, setSearchTen] = useState([]);
  const [searchSdt, setSearchSdt] = useState([]);
  const [hienThiMaGiamGia, setHienThiMaGiamGia] = useState(false);
  const [dichVuList, setDichVuList] = useState([]);
  const [khachHangData, setKhachHangData] = useState([]);
  const [errorMsg, setErrorMsg] = useState("");

  const API_BASE = "http://localhost:3000/api/khachhang";
  const typingTimeout = useRef(null);

  const openingHour = 5;
  const courts = [
    "S√¢n 1",
    "S√¢n 2",
    "S√¢n 3",
    "S√¢n 4",
    "S√¢n 5",
    "S√¢n 6",
    "S√¢n 7",
    "S√¢n 8",
    "S√¢n 9",
    "S√¢n 10",
    "S√¢n 11",
    "S√¢n 12",
    "S√¢n 13",
    "S√¢n 14",
    "S√¢n 15",
    "S√¢n TT",
  ];

  const getSlotPrice = (courtName, slotIndex) => {
    const hour = openingHour + slotIndex;
    const isAfter16h = hour >= 16;
    if (courtName === "S√¢n TT") return isAfter16h ? 200000 : 150000;
    return isAfter16h ? 160000 : 100000;
  };

  // üß© L·∫•y d·ªØ li·ªáu ƒë·∫∑t s√¢n t·ª´ localStorage
  useEffect(() => {
    const data = localStorage.getItem("bookingData");
    if (!data) {
      alert("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t s√¢n. Vui l√≤ng quay l·∫°i ch·ªçn s√¢n!");
      window.location.href = "/datsan";
      return;
    }
    const parsed = JSON.parse(data);
    const grouped = {};

    parsed.selectedSlots.forEach((s) => {
      const courtName = courts[s.courtIndex];
      const hour = openingHour + s.slotIndex;
      const date = parsed.date || new Date().toLocaleDateString("vi-VN");
      if (!grouped[courtName]) grouped[courtName] = {};
      if (!grouped[courtName][date]) grouped[courtName][date] = [];
      grouped[courtName][date].push(hour);
    });

    const merged = [];
    Object.keys(grouped).forEach((courtName) => {
      Object.keys(grouped[courtName]).forEach((date) => {
        const hours = grouped[courtName][date].sort((a, b) => a - b);
        let start = hours[0],
          end = hours[0];
        for (let i = 1; i <= hours.length; i++) {
          if (hours[i] === end + 1) {
            end = hours[i];
          } else {
            const baseSlot = start - openingHour;
            const gia = getSlotPrice(courtName, baseSlot);
            merged.push({
              ten: courtName,
              loai: "S√¢n ti√™u chu·∫©n",
              ngay: date,
              batDau: `${String(start).padStart(2, "0")}:00`,
              ketThuc: `${String(end + 1).padStart(2, "0")}:00`,
              gia,
              soGio: end - start + 1,
            });
            start = hours[i];
            end = hours[i];
          }
        }
      });
    });
    setDanhSachSan(merged);
  }, []);

  const tinhSoGio = (bd, kt) => {
    const [h1, m1] = bd.split(":").map(Number);
    const [h2, m2] = kt.split(":").map(Number);
    return h2 + m2 / 60 - (h1 + m1 / 60);
  };

  const tongTien = danhSachSan.reduce(
    (sum, san) => sum + san.gia * tinhSoGio(san.batDau, san.ketThuc),
    0
  );

  // üîπ API t√¨m ki·∫øm kh√°ch h√†ng
  const timKiemKhachHang = async (tuKhoa, type) => {
    if (!tuKhoa.trim())
      return type === "ten" ? setSearchTen([]) : setSearchSdt([]);
    try {
      const res = await fetch(
        `${API_BASE}/search?q=${encodeURIComponent(tuKhoa)}`
      );
      if (!res.ok) throw new Error("L·ªói khi g·ªçi API t√¨m ki·∫øm");
      const data = await res.json();
      type === "ten" ? setSearchTen(data) : setSearchSdt(data);
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    clearTimeout(typingTimeout.current);
    typingTimeout.current = setTimeout(
      () => timKiemKhachHang(tenKhach, "ten"),
      400
    );
  }, [tenKhach]);
  useEffect(() => {
    clearTimeout(typingTimeout.current);
    typingTimeout.current = setTimeout(() => timKiemKhachHang(sdt, "sdt"), 400);
  }, [sdt]);

  const chonKhach = (ten, sdt, id) => {
    setTenKhach(ten);
    setSdt(sdt);
    setSelectedKhachHangId(id); // <-- L∆∞u MaKH
    setSearchTen([]);
    setSearchSdt([]);
    setHienThiMaGiamGia(true);
  };

  const handlePhoneChange = (e) => {
    const value = e.target.value.replace(/\D/g, "");
    setSdt(value);
    if (value && !/^\d{10}$/.test(value)) {
      setErrorMsg("‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (ph·∫£i ƒë·ªß 10 s·ªë)");
    } else {
      setErrorMsg("");
    }
  };

  const themKhachHang = async () => {
    if (!tenKhach.trim() || !sdt.trim()) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n v√† s·ªë ƒëi·ªán tho·∫°i!");
      return;
    }
    if (!/^\d{10}$/.test(sdt)) {
      alert("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (10 s·ªë)!");
      return;
    }
    try {
      const randomNum = Math.floor(Math.random() * 900000 + 100000);
      const idKh = `KH${randomNum}`;
      const res = await fetch(`${API_BASE}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: idKh,
          TenKh: tenKhach,
          GioiTinh: "",
          SDT: sdt,
          DiaChi: "",
        }),
      });
      const result = await res.json();
      if (!res.ok) throw new Error(result.message || "L·ªói th√™m kh√°ch h√†ng!");
      alert(result.message || "‚úÖ Th√™m kh√°ch h√†ng th√†nh c√¥ng!");
      setKhachHangData([...khachHangData, result]);
      setSelectedKhachHangId(result.id); // <-- L∆∞u MaKH
    } catch (err) {
      console.error(err);
      alert(err.message || "‚ùå L·ªói khi th√™m kh√°ch h√†ng!");
    }
  };

  const xacNhanDatSan = async () => {
    const data = localStorage.getItem("bookingData");
    if (!data) {
      alert("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t s√¢n!");
      window.location.href = "/datsan";
      return;
    }

    const parsed = JSON.parse(data);

    if (!tenKhach.trim() || !sdt.trim()) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n v√† s·ªë ƒëi·ªán tho·∫°i!");
      return;
    }
    if (!/^\d{10}$/.test(sdt)) {
      alert("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (10 s·ªë)!");
      return;
    }

    if (!selectedKhachHangId) {
      alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn kh√°ch h√†ng!");
      return;
    }

    try {
      const grouped = {};
      parsed.selectedSlots.forEach((s) => {
        const courtName = courts[s.courtIndex];
        const date = parsed.date
          ? new Date(parsed.date).toISOString().split("T")[0]
          : new Date().toISOString().split("T")[0]; // ‚úÖ format YYYY-MM-DD
        const hour = openingHour + s.slotIndex;
        if (!grouped[courtName]) grouped[courtName] = {};
        if (!grouped[courtName][date]) grouped[courtName][date] = [];
        grouped[courtName][date].push(hour);
      });

      const requests = [];
      Object.keys(grouped).forEach((courtName) => {
        Object.keys(grouped[courtName]).forEach((date) => {
          const hours = grouped[courtName][date].sort((a, b) => a - b);
          let start = hours[0],
            end = hours[0];
          for (let i = 1; i <= hours.length; i++) {
            if (hours[i] === end + 1) {
              end = hours[i];
            } else {
              const soGio = end - start + 1;
              const gia = getSlotPrice(courtName, start - openingHour);
              requests.push({
                MaSan: `S${courts.indexOf(courtName) + 1}`,
                MaKH: selectedKhachHangId,
                MaNV: "NV001",
                GioVao: `${String(start).padStart(2, "0")}:00:00`,
                GioRa: `${String(end + 1).padStart(2, "0")}:00:00`,
                TongGio: soGio,
                TongTien: gia * soGio,
                GiamGia: 0,
                TongTienThuc: gia * soGio,
                GhiChu: "",
                LoaiDat: parsed.bookingType || "ƒê·∫∑t s√¢n ng√†y",
                NgayLap: date, // ‚úÖ ƒë√£ chu·∫©n h√≥a ƒë·ªãnh d·∫°ng
              });
              start = hours[i];
              end = hours[i];
            }
          }
        });
      });

      for (let reqBody of requests) {
        const res = await fetch("http://localhost:3000/api/san/book", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(reqBody),
        });
        const result = await res.json();
        if (!res.ok) throw new Error(result.message || "L·ªói khi ƒë·∫∑t s√¢n!");
      }

      alert("‚úÖ ƒê·∫∑t s√¢n th√†nh c√¥ng!");
      localStorage.removeItem("bookingData");

      // ‚úÖ Chuy·ªÉn v·ªÅ trang ch·ªß sau khi ƒë·∫∑t th√†nh c√¥ng
      window.location.href = "/";

    } catch (err) {
      console.error("‚ùå L·ªói ƒë·∫∑t s√¢n:", err);

      // ‚úÖ Gi·ªØ l·∫°i d·ªØ li·ªáu khi b·ªã l·ªói ƒë·ªÉ ng∆∞·ªùi d√πng quay l·∫°i X√°c nh·∫≠n
      alert(err.message || "‚ùå L·ªói ƒë·∫∑t s√¢n! Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.");

      // Gi·ªØ nguy√™n d·ªØ li·ªáu v·ª´a nh·∫≠p (kh√¥ng x√≥a localStorage)
      // Quay l·∫°i trang x√°c nh·∫≠n ƒë·∫∑t s√¢n
      window.location.href = "/xacnhandatsan";
    }
  };


  // ==== RENDER ====
  return (
    <div className="xac-nhan-wrapper">
      <Sidebar />
      <div className="confirm-container">
        <h1>X√°c nh·∫≠n ƒë·∫∑t s√¢n</h1>
        {/* B·∫£ng s√¢n */}
        <div className="info-group">
          <h2>Danh s√°ch s√¢n kh√°ch ƒë·∫∑t</h2>
          <table>
            <thead>
              <tr>
                <th>T√™n s√¢n</th>
                <th>Lo·∫°i s√¢n</th>
                <th>Ng√†y</th>
                <th>Gi·ªù b·∫Øt ƒë·∫ßu</th>
                <th>Gi·ªù k·∫øt th√∫c</th>
                <th>Gi√° / gi·ªù</th>
                <th>T·ªïng</th>
              </tr>
            </thead>
            <tbody>
              {danhSachSan.map((san, index) => {
                const gio = tinhSoGio(san.batDau, san.ketThuc);
                const tong = san.gia * gio;
                return (
                  <tr key={index}>
                    <td>{san.ten}</td>
                    <td>{san.loai}</td>
                    <td>{san.ngay}</td>
                    <td>{san.batDau}</td>
                    <td>{san.ketThuc}</td>
                    <td>{san.gia.toLocaleString()}ƒë</td>
                    <td className="tongTien">{tong.toLocaleString()}ƒë</td>
                  </tr>
                );
              })}
            </tbody>
          </table>
          <div className="total">T·ªïng c·ªông: {tongTien.toLocaleString()}ƒë</div>
        </div>

        {/* Th√¥ng tin kh√°ch */}
        <div className="info-group">
          <h2>Th√¥ng tin kh√°ch h√†ng</h2>
          <div className="flex-row">
            <div className="flex-col" style={{ position: "relative" }}>
              <label>H·ªç v√† t√™n:</label>
              <input
                type="text"
                value={tenKhach}
                onChange={(e) => setTenKhach(e.target.value)}
                placeholder="Nh·∫≠p h·ªç t√™n..."
                autoComplete="off"
              />
              {searchTen.length > 0 && (
                <div
                  className="search-results-table"
                  style={{ position: "relative" }}
                >
                  <table className="suggest-table">
                    <thead>
                      <tr>
                        <th>H·ªç & t√™n</th>
                        <th>SƒêT</th>
                        <th>M√£</th>
                      </tr>
                    </thead>
                    <tbody>
                      {searchTen
                        .filter((kh) =>
                          kh?.TenKh?.toLowerCase().includes(
                            tenKhach.toLowerCase()
                          )
                        )
                        .slice(0, 5)
                        .map((kh, i) => (
                          <tr
                            key={i}
                            onClick={() =>
                              chonKhach(kh.TenKh, kh.SDT, kh.id ?? kh.ID)
                            }
                            style={{ cursor: "pointer" }}
                          >
                            <td>{kh.TenKh}</td>
                            <td>{kh.SDT}</td>
                            <td>{kh.id ?? kh.ID ?? ""}</td>
                          </tr>
                        ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>

            <div className="flex-col" style={{ position: "relative" }}>
              <label>S·ªë ƒëi·ªán tho·∫°i:</label>
              <input
                type="tel"
                value={sdt}
                onChange={handlePhoneChange}
                placeholder="Nh·∫≠p SƒêT..."
                maxLength={10}
                autoComplete="off"
              />
              {errorMsg && <p className="error-text">{errorMsg}</p>}
              {searchSdt.length > 0 && (
                <div
                  className="search-results-table"
                  style={{ position: "relative" }}
                >
                  <table className="suggest-table">
                    <thead>
                      <tr>
                        <th>SƒêT</th>
                        <th>H·ªç & t√™n</th>
                        <th>M√£</th>
                      </tr>
                    </thead>
                    <tbody>
                      {searchSdt
                        .filter((kh) => String(kh?.SDT || "").includes(sdt))
                        .slice(0, 5)
                        .map((kh, i) => (
                          <tr
                            key={i}
                            onClick={() =>
                              chonKhach(kh.TenKh, kh.SDT, kh.id ?? kh.ID)
                            }
                            style={{ cursor: "pointer" }}
                          >
                            <td>{kh.SDT}</td>
                            <td>{kh.TenKh}</td>
                            <td>{kh.id ?? kh.ID ?? ""}</td>
                          </tr>
                        ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>

          <div className="actions-customer">
            <button className="btn-add-customer" onClick={themKhachHang}>
              + Th√™m kh√°ch h√†ng m·ªõi
            </button>
            {hienThiMaGiamGia && (
              <div>
                <label htmlFor="maGiamGia">M√£ gi·∫£m gi√°:</label>
                <select id="maGiamGia">
                  <option value="">-- Ch·ªçn m√£ gi·∫£m gi√° --</option>
                  <option value="KM10">Gi·∫£m 10%</option>
                  <option value="KM50">Gi·∫£m 50.000ƒë</option>
                </select>
              </div>
            )}
          </div>
        </div>

        {/* D·ªãch v·ª• th√™m */}
        <div className="info-group">
          <h2>D·ªãch v·ª• th√™m</h2>
          <button
            className="btn-add-service"
            onClick={() => setDichVuList([...dichVuList, { ten: "", gia: "" }])}
          >
            + Th√™m d·ªãch v·ª•
          </button>
          <div className="dichvu-list">
            {dichVuList.map((dv, index) => (
              <div key={index} className="dich-vu-item">
                <input
                  type="text"
                  className="input-ten-dv"
                  placeholder="T√™n d·ªãch v·ª•"
                  value={dv.ten}
                  onChange={(e) => {
                    const updated = [...dichVuList];
                    updated[index].ten = e.target.value;
                    setDichVuList(updated);
                  }}
                />
                <input
                  type="number"
                  className="input-gia-dv"
                  placeholder="Gi√° (ƒë)"
                  value={dv.gia}
                  onChange={(e) => {
                    const updated = [...dichVuList];
                    updated[index].gia = e.target.value;
                    setDichVuList(updated);
                  }}
                />
              </div>
            ))}
          </div>
        </div>

        <div className="confirm-buttons">
          <button className="btn-back" onClick={() => history.back()}>
            Quay l·∫°i
          </button>
          <button className="btn-confirm" onClick={xacNhanDatSan}>
            X√°c nh·∫≠n ƒë·∫∑t s√¢n
          </button>
        </div>
      </div>
    </div>
  );
}
