import { db } from "../../config/db.js";
import multer from "multer";
import path from "path";
import fs from "fs";

// 1Ô∏è‚É£ C·∫•u h√¨nh multer l∆∞u file v√†o folder uploads/payments
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const dir = "uploads/payments";
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    const ext = path.extname(file.originalname);
    const uniqueName = `${Date.now()}_${Math.floor(Math.random() * 10000)}${ext}`;
    cb(null, uniqueName);
  },
});

export const uploadPaymentScreenshot = multer({ storage });

// 2Ô∏è‚É£ API ƒë·∫∑t s√¢n gi·ªëng TTXeVe
export async function postDatSan(req, res) {
  try {
    // üîπ L·∫•y d·ªØ li·ªáu t·ª´ FormData
    const {
      MaSan,
      MaKH,
      MaNV,
      GioVao,
      GioRa,
      TongGio,
      TongTien,
      GiamGia,
      TongTienThuc,
      GhiChu,
      LoaiDat,
      NgayLap,
      TienDichVu,
      DanhSachDichVu,
    } = req.body;

    if (!MaSan || !MaKH || !GioVao || !GioRa || !NgayLap) {
      return res.status(400).json({ success: false, message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc" });
    }

    // ·∫¢nh thanh to√°n
    let PaymentScreenshot = null;
    if (req.file) PaymentScreenshot = req.file.filename;

    // Chuy·ªÉn m·∫£ng d·ªãch v·ª• th√†nh JSON string tr∆∞·ªõc khi l∆∞u
    const servicesJSON = DanhSachDichVu ? JSON.stringify(DanhSachDichVu) : null;

    // Chu·∫©n h√≥a gi·ªù
    const gioVaoFormat = GioVao.length === 8 ? GioVao : `${GioVao}:00`;
    const gioRaFormat = GioRa.length === 8 ? GioRa : `${GioRa}:00`;

    // Ki·ªÉm tra tr√πng gi·ªù
    const [checkExist] = await db.execute(
      `SELECT * FROM tbl_datsan 
       WHERE MaSan = ? AND NgayLap = ? 
       AND (
         (GioVao <= ? AND GioRa > ?) OR 
         (GioVao < ? AND GioRa >= ?)
       )`,
      [MaSan, NgayLap, gioVaoFormat, gioVaoFormat, gioRaFormat, gioRaFormat]
    );

    if (checkExist.length > 0) {
      return res.status(400).json({
        success: false,
        message: "Khung gi·ªù n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t, vui l√≤ng ch·ªçn gi·ªù kh√°c!",
      });
    }

    // Th√™m d·ªØ li·ªáu ƒë·∫∑t s√¢n v√†o DB
    const [result] = await db.execute(
      `INSERT INTO tbl_datsan 
      (MaSan, MaKH, MaNV, GioVao, GioRa, TongGio, TongTien, GiamGia, TongTienThuc, GhiChu, LoaiDat, NgayLap, TienDichVu, DanhSachDichVu, PaymentScreenshot)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        MaSan,
        MaKH,
        MaNV || "",
        gioVaoFormat,
        gioRaFormat,
        TongGio || 1,
        TongTien || 0,
        GiamGia || 0,
        TongTienThuc || TongTien || 0,
        GhiChu || "",
        LoaiDat || "ƒê·∫∑t s√¢n ng√†y",
        NgayLap,
        TienDichVu || 0,
        servicesJSON,
        PaymentScreenshot,
      ]
    );

    res.json({
      success: true,
      message: "‚úÖ ƒê·∫∑t s√¢n th√†nh c√¥ng",
      insertedId: result.insertId,
      PaymentScreenshot,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒë·∫∑t s√¢n:", err);
    res.status(500).json({ success: false, message: "L·ªói khi ƒë·∫∑t s√¢n", error: err.message });
  }
}
